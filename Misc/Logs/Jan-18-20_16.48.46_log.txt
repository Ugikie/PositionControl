Saving log to: /home/ugikie/Desktop/PositionControl/Misc/Logs/Jan-18-20_16.48.46_log.txt

[16:48:52.629] Verifying if Axis is in Position. . . . 
[16:48:55.987] Moving Axis (AZ) from position: -75.05, to desired position: -90.00. . . . 
[16:49:06.166] Stopping Measurements. . .
[16:49:09.306] Verifying if Axis is in Position. . . . 
{Output argument "AZCurrPosDoub" (and maybe others) not assigned during call to "getAZCurrPos".

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('verifyIfInPosition', '/home/ugikie/Desktop/PositionControl/Status/verifyIfInPosition.m', 26)" style="font-weight:bold">verifyIfInPosition</a> (<a href="matlab: opentoline('/home/ugikie/Desktop/PositionControl/Status/verifyIfInPosition.m',26,0)">line 26</a>)
          AZCurrPos = getAZCurrPos(MI4190,measApp);

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('testing', '/home/ugikie/Desktop/PositionControl/System/testing.m', 97)" style="font-weight:bold">testing</a> (<a href="matlab: opentoline('/home/ugikie/Desktop/PositionControl/System/testing.m',97,0)">line 97</a>)
verifyIfInPosition(MI4190,AZStartPos,POSITION_ERROR,0,measApp,'N','N','v');
} 
[16:49:10.457] Stopping Measurements. . .
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('serial/fclose', '/usr/local/MATLAB/R2019b/toolbox/matlab/serial/@serial/fclose.m', 53)" style="font-weight:bold">serial/fclose</a> (<a href="matlab: opentoline('/usr/local/MATLAB/R2019b/toolbox/matlab/serial/@serial/fclose.m',53,0)">line 53</a>)
Unexpected Error: Instrument object OBJ is an invalid object.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('app1/MeasurementAppCloseRequest', '/home/ugikie/Desktop/PositionControl/Misc/Example Scripts/app1.mlapp', 115)" style="font-weight:bold">app1/MeasurementAppCloseRequest</a> (<a href="matlab: opentoline('/home/ugikie/Desktop/PositionControl/Misc/Example Scripts/app1.mlapp',115,0)">line 115</a>)
                fclose(app.MI4190Obj);

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('app1/StopButtonPushed', '/home/ugikie/Desktop/PositionControl/Misc/Example Scripts/app1.mlapp', 100)" style="font-weight:bold">app1/StopButtonPushed</a> (<a href="matlab: opentoline('/home/ugikie/Desktop/PositionControl/Misc/Example Scripts/app1.mlapp',100,0)">line 100</a>)
            MeasurementAppCloseRequest(app);
} 
Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('matlab.ui.control.internal.controller.ComponentController/executeUserCallback', '/usr/local/MATLAB/R2019b/toolbox/matlab/uicomponents/uicomponents/+matlab/+ui/+control/+internal/+controller/ComponentController.m', 335)" style="font-weight:bold">matlab.ui.control.internal.controller.ComponentController/executeUserCallback</a> (<a href="matlab: opentoline('/usr/local/MATLAB/R2019b/toolbox/matlab/uicomponents/uicomponents/+matlab/+ui/+control/+internal/+controller/ComponentController.m',335,0)">line 335</a>)
Error while evaluating Button PrivateButtonPushedFcn.

delete(measApp)
help path
 <strong>path</strong> Get/set search path.
    <strong>path</strong>, by itself, prettyprints MATLAB's current search path. The initial
    search path list is set by PATHDEF, and is perhaps individualized by
    STARTUP.
 
    P = <strong>path</strong> returns a character vector containing the path in P. <strong>path</strong>(P)
    changes the path to P.
 
    <strong>path</strong>(P1,P2) changes the path to the concatenation of the two search 
    paths P1 and P2.  Thus <strong>path</strong>(<strong>path</strong>,P) appends the folder P to the
    current path and <strong>path</strong>(P,<strong>path</strong>) prepends the folder P.  If P is already
    on the path, then <strong>path</strong>(<strong>path</strong>,P) moves P to the end of the path,
    and similarly, <strong>path</strong>(P,<strong>path</strong>) moves P to the beginning of the path.
 
    For example, the following statements add another folder to MATLAB's
    search path on various operating systems:
 
      Unix:     path(path,'/home/myfriend/goodstuff')
      Windows:  path(path,'c:\tools\goodstuff')
 
    See also <a href="matlab:help what">what</a>, <a href="matlab:help cd">cd</a>, <a href="matlab:help dir">dir</a>, <a href="matlab:help addpath">addpath</a>, <a href="matlab:help rmpath">rmpath</a>, <a href="matlab:help genpath">genpath</a>, <a href="matlab:help pathtool">pathtool</a>, <a href="matlab:help savepath">savepath</a>, <a href="matlab:help rehash">rehash</a>.

    <a href="matlab:doc path">Documentation for path</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('path')">Other functions named path</a>

help patch
 <strong>patch</strong> Create one or more filled polygons
    <strong>patch</strong>(X,Y,C) creates one or more filled polygons using the elements of
    X and Y as the coordinates for each vertex. patch connects the vertices
    in the order that you specify them. To create one polygon, specify X
    and Y as vectors. To create multiple polygons, specify X and Y as
    matrices where each column corresponds to a polygon. C determines the
    polygon colors.
 
    For both vector or matrix X and Y, if C is a string, each face is
    filled with 'color'. 'color' can be 'r','g','b','c','m','y', 'w', or
    'k'. If C is a scalar it specifies the color of the face(s) by indexing
    into the colormap. A 1-by-3 vector C is always assumed to be an RGB
    triplet specifying a color directly.
 
    For vector X and Y, if C is a vector of the same length, it specifies
    the color of each vertex as indices into the colormap and bilinear
    interpolation is used to determine the interior color of the polygon
    ("interpolated" shading).
 
    When X and Y are matrices, if C is a 1-by-n, where n is the number of
    columns in X and Y, then each face j=1:n is flat colored by the
    colormap index C(j). Note the special case of a 1-by-3 C is always
    assumed to be an RGB triplet ColorSpec and specifies the same flat
    color for each face. If C is a matrix the same size as X and Y, then it
    specifies the colors at the vertices as colormap indices and bilinear
    interpolation is used to color the faces. If C is 1-by-n-by-3, where n
    is the number of columns of X and Y, then each face j is flat colored
    by the RGB triplet C(1,j,:). If C is m-by-n-by-3, where X and Y are
    m-by-n, then each vertex (X(i,j),Y(i,j)) is colored by the RGB triplet
    C(i,j,:) and the face is colored using interpolation.
 
    <strong>patch</strong>(X,Y,Z,C) creates the polygons in 3-D coordinates using X, Y, and
    Z. To view the polygons in a 3-D view, use the view(3) command. C
    determines the polygon colors.
 
    <strong>patch</strong>('XData',X,'YData',Y) is similar to <strong>patch</strong>(X,Y,C), except that you
    do not have to specify color data for the 2-D coordinates.
 
    <strong>patch</strong>('XData',X,'YData',Y,'ZData',Z) is similar to <strong>patch</strong>(X,Y,Z,C),
    except that you do not have to specify color data for the 3-D
    coordinates.
 
    <strong>patch</strong>('Faces',F,'Vertices',V) creates one or more polygons where V
    specifies vertex values and F defines which vertices to connect.
    Specifying only unique vertices and their connection matrix can reduce
    the size of the data when there are many polygons. Specify one vertex
    per row in V. To create one polygon, specify F as a vector. To create
    multiple polygons, specify F as a matrix with one row per polygon. Each
    face does not have to have the same number of vertices. To specify
    different numbers of vertices, pad F with NaN values.
 
    <strong>patch</strong>(S) creates one or more polygons using structure S. The structure
    fields correspond to patch property names and the field values
    corresponding to property values. For example, S can contain the fields
    Faces and Vertices.
 
    <strong>patch</strong>(...,Name,Value) creates polygons and specifies one or more patch
    properties using name-value pair arguments. A patch is the object that
    contains the data for all of the polygons created. You can specify
    patch properties with any of the input argument combinations in the
    previous syntaxes. For example, 'LineWidth',2 sets the outline width
    for all of the polygons to 2 points.
 
    <strong>patch</strong>(container,...) creates polygons in the axes, group, or transform
    specified by container, instead of in the current axes.
 
    P = <strong>patch</strong>(...) returns the patch object that contains the data for all
    the polygons.
 
    Execute GET(P), where P is a patch object, to see a list of patch
    object properties and their current values.
    Execute SET(P) to see a list of patch object properties and legal
    property values.
 
    See also <a href="matlab:help fill">fill</a>, <a href="matlab:help fill3">fill3</a>, <a href="matlab:help line">line</a>, <a href="matlab:help text">text</a>, <a href="matlab:help shading">shading</a>.

    <a href="matlab:doc patch">Documentation for patch</a>

testing
Beginning Measurements 18-Jan-2020 16:51:40
